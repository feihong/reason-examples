// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MutableQueue = require("bs-platform/lib/js/belt_MutableQueue.js");

function ntcTraverse(tree) {
  if (tree.tag) {
    var lst = Belt_List.concat(ntcTraverse(tree[1]), ntcTraverse(tree[2]));
    return /* :: */[
            tree[0],
            lst
          ];
  } else {
    return /* :: */[
            tree[0],
            /* [] */0
          ];
  }
}

function traverse(_acc, _stack) {
  while(true) {
    var stack = _stack;
    var acc = _acc;
    if (stack) {
      var match = stack[0];
      if (match.tag) {
        var acc$prime_000 = match[0];
        var acc$prime = /* :: */[
          acc$prime_000,
          acc
        ];
        var stack$prime_000 = match[1];
        var stack$prime_001 = /* :: */[
          match[2],
          stack[1]
        ];
        var stack$prime = /* :: */[
          stack$prime_000,
          stack$prime_001
        ];
        _stack = stack$prime;
        _acc = acc$prime;
        continue ;
      } else {
        _stack = stack[1];
        _acc = /* :: */[
          match[0],
          acc
        ];
        continue ;
      }
    } else {
      return Belt_List.reverse(acc);
    }
  };
}

function qTraverse(tree) {
  var acc = Belt_MutableQueue.make(/* () */0);
  var aux = function (_stack) {
    while(true) {
      var stack = _stack;
      if (stack) {
        var match = stack[0];
        Belt_MutableQueue.add(acc, match[0]);
        if (match.tag) {
          _stack = /* :: */[
            match[1],
            /* :: */[
              match[2],
              stack[1]
            ]
          ];
          continue ;
        } else {
          _stack = stack[1];
          continue ;
        }
      } else {
        return /* () */0;
      }
    };
  };
  aux(/* :: */[
        tree,
        /* [] */0
      ]);
  return Belt_MutableQueue.toArray(acc);
}

var myTree = /* Node */Block.__(1, [
    1,
    /* Node */Block.__(1, [
        2,
        /* Node */Block.__(1, [
            4,
            /* Leaf */Block.__(0, [41]),
            /* Leaf */Block.__(0, [42])
          ]),
        /* Node */Block.__(1, [
            6,
            /* Leaf */Block.__(0, [61]),
            /* Leaf */Block.__(0, [62])
          ])
      ]),
    /* Node */Block.__(1, [
        3,
        /* Node */Block.__(1, [
            5,
            /* Leaf */Block.__(0, [51]),
            /* Leaf */Block.__(0, [52])
          ]),
        /* Node */Block.__(1, [
            7,
            /* Leaf */Block.__(0, [71]),
            /* Leaf */Block.__(0, [72])
          ])
      ])
  ]);

console.log(Belt_List.toArray(ntcTraverse(myTree)));

console.log(Belt_List.toArray(traverse(/* [] */0, /* :: */[
              myTree,
              /* [] */0
            ])));

console.log(qTraverse(myTree));

exports.ntcTraverse = ntcTraverse;
exports.traverse = traverse;
exports.qTraverse = qTraverse;
exports.myTree = myTree;
/*  Not a pure module */
